
<h1><%= title %></h1>

<div id="user-welcome" style="display: none;">
	<div class="d-inline-block pr-3">Welcome, <span id="user"></span></div>
  <button id="logout" type="button" class="btn btn-danger">Logout</button>
</div>

<br/>

<form id="user-auth">
  <div class="form-group">
    <input type="email" class="form-control" id="email" placeholder="Email">
  </div>
  
  <div class="form-group">
    <input type="password" class="form-control" id="password" placeholder="Password">
  </div>
   
  <button id="signup" type="button" class="btn btn-primary">Sign-up</button>
  <button id="login" type="button" class="btn btn-success">Login</button>
</form>

<div id="display-name-field" style="display: none; height: 54px;">
  <div class="mb-2">Display Name</div>
  <div id="display-name-text" style="font-size: 15px; padding-top: 10px; padding-left: 12px;">(None)</div>
  <input style="display: none;" type="text" class="form-control" id="display-name-input" placeholder="Display name">
</div>

<script>
  var socket = io.connect(window.location.host);
  
  socket.on('sign-up-failure', data => alert('Sign up failed, ' + JSON.parse(data).message));
  socket.on('log-in-failure', data => alert('Log in failed, ' + JSON.parse(data).message));
  socket.on('log-out-failure', data => alert('Log out failed, ' + JSON.parse(data).message));

  $(document).ready(() => {
    setupAuthListeners();
    setupAuthEmitters();
    
    setupDisplayNameField();
    
    socket.emit('begin-auth');
  });
  
  function setupAuthListeners() {
    socket.on('auth-state-changed', data => {
      var user = JSON.parse(data);
      
      if (user) {
        console.log(user);
	$('#user-auth').hide();
        $('#user').text(user.email);
        $('#user-welcome').show();
        $('#display-name-field').show();
      }
      else {
        $('#user-welcome').hide();
        $('#display-name-field').hide();
	$('#user-auth').show();
      }
    });
  }
  
  function setupAuthEmitters() {
    $('#signup').click(e => {
      var email = $('#email').val();
      var password = $('#password').val();

      socket.emit('sign-up-request', JSON.stringify({
        email: email,
        password: password
      }));
    });
    
    $('#login').click(e => {
      var email = $('#email').val();
      var password = $('#password').val();

      socket.emit('log-in-request', JSON.stringify({
        email: email,
        password: password
      }));
    });
    
    $('#logout').click(e => socket.emit('log-out-request'));
  }
  
  function setupDisplayNameField() {
    // Allow editing.
    $('#display-name-text').click(e => { // If text clicked, start editing.
      $('#display-name-text').hide(0, e => { // Hide text element.
        $('#display-name-input').show(); // Show the text input.
        $('#display-name-input').focus();
      });
    });
    
    // Allow saving.
    $('#display-name-input').focusout(e => { // If input unfocused, stop editing and save.
      var displayName = $('#display-name-input').val();
      socket.emit('send-update-user', JSON.stringify({ displayName: displayName }));
      $('#display-name-text').html(displayName == '' ? '(None)' : displayName);
      $('#display-name-input').hide(0, e => $('#display-name-text').show());
    });
    
    // Allow update from remote edit.
    socket.on('receive-update-user', data => {
      var userUpdate = JSON.parse(data);
      
      if (userUpdate.hasOwnProperty('displayName')) {
        $('#display-name-text').val(userUpdate.displayName);
        $('#display-name-input').val(userUpdate.displayName);
      }
    });
  }
</script>
